import numpy as np
from matplotlib import pyplot as plt 

def solar_power_sso():
    """ Example of time series: 
    Power generated by four solar arrays 
    in a Sun-synchronous orbit. 
    The satellite is spinning around its
    Nadir axis and there are solar arrays 
    on the four sides. """

    def inc_sso(a):
        #Intent in: a(real), semimajor axis.
        #Returns: i(real), inclination
         
        J2 = 1.0827*10**(-3.)
        d_alfa = 2*np.pi/(365.25*24*3600)# rad/s
        mu = 3.986044418*10**5.
        Rt = 6378# km
        i = np.arccos(-(2./3)*d_alfa/(J2*Rt**2.)*np.sqrt(a**7./mu))
        return i

    # Orbit definition
    Rt = 6378# km
    mu = 3.986044418*10**5.
    h = 450# km
    a = Rt+h# km
    T = 2*np.pi*np.sqrt(a**3./mu)# s
    n = 2*np.pi/T# rad/s
    # SSO orbit's inclination 
    inc = inc_sso(a)
    #Time for RAAN=0 
    H0 = 12# High-noon
    delta=15*(H0-12)*np.pi/180.
    #Solar angle  
    betha = np.arcsin(np.sin(delta)*np.sin(inc))

    #Time when eclipse begins
    rho = np.arcsin(Rt/a)
    phi_2 = np.arccos(np.cos(rho)/np.cos(betha))
    alfa_ecl = np.pi-phi_2
    t_ecl = alfa_ecl/n

    #Power generated by the solar array 
    G = 1360# W/mÂ²
    f_oc = 0.867# Occupation's factor
    eta = 0.29# Efficiency
    A = 0.03# m^2
    omega = 0.05# rad/s
    N_period = 20
    Nt=5000*N_period
    t=np.linspace(0,N_period*T,Nt)
    Px = np.zeros((4,Nt))# W (4 faces N times)
    Py = np.zeros((4,Nt))# W (4 faces N times)
    P0 = np.zeros(Nt)
    P0 = G*A*f_oc*eta*(1-0.05*t/(3600*24))

    for i in range(0,4):
        Px[i,:] = [max(P0[j]*np.cos(betha)*np.cos(omega*t[j]+(i-1)*np.pi/2.)*np.sin(n*t[j]),0) for j in range(0,len(t))] 
        Py[i,:] = [max(P0[j]*np.sin(betha)*np.cos(omega*t[j]+(i-1)*np.pi/2.),0) for j in range(0,len(t))] 

    for j in range(0,Nt):
        for k in range(0,N_period):
            if t[j] > (T*k + t_ecl) and t[j] < (T*(k+1)-t_ecl):
                Px[:,j] = 0
                Py[:,j] = 0

    P_t = np.zeros(Nt)
    for i in range(0,4):
        P_t = P_t + Px[i,:] + Py[i,:] 

    return [t,P_t]  

if __name__ == "__main__":
    [t, P_t] = solar_power_sso()
     #Plots
    plt.figure()
    plt.plot(t,P_t)
    plt.xlabel('t')
    plt.ylabel('Pt')
    plt.title('Total power in one orbit') 
    plt.show()